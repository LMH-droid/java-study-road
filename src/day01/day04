package day04;

public interface Animal {
    void eat();
    void sleep();
}


package day04;

public class Dog  implements Animal{
    @Override
    public void eat(){
        System.out.println("狗吃饭");
    }
    @Override
    public void sleep(){
        System.out.println("狗睡觉");
    }
}


package day04;

public class Test {
    public static void main(String[] args){
        Animal Dog = new Dog();

        Dog.eat();
        Dog.sleep();

    }
}




abstract 抽象类
package d04;

public abstract class AnimalAbstract {
    public abstract void eat();
        public abstract void sleep();
}




package d04;

public class Cat extends AnimalAbstract {
    @Override
    public void eat(){
        System.out.println( "猫吃鱼");
    }
    @Override
    public  void sleep(){
        System.out.println("猫睡觉");
    }
}





package d04;

public class TestAbstract {
    public static void main(String[] args){
        AnimalAbstract Cat = new Cat();
        Cat.eat();
        Cat.sleep();
    }
}











package da04;

public class Outerclass {
    private String name = "外部类";

    public class InnerClass{
        public void show(){
            System.out.println("我是"+name+"的成员内部量");
        }
    }
}




package da04;

public class InnerClass {
    public static void main(String[] args){
        Outerclass outer = new Outerclass();
        Outerclass.InnerClass Inner = outer.new InnerClass();
        Inner.show();

    }
}

